{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","Form","onSubmit","e","preventDefault","trim","length","categories","Group","InputGroup","Control","type","value","onChange","target","Append","Text","icon","faSearch","className","GifGridItem","title","url","Card","Img","variant","src","Body","Title","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Spinner","animation","role","CardColumns","key","GifExpertApp","Container","Navbar","fixed","bg","Brand","href","Toggle","Jumbotron","ReactDOM","render","document","getElementById"],"mappings":"gTAMaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,kBAACC,EAAA,EAAD,CAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAiBR,GAAjB,mBAAgCQ,OAC9CP,EAAc,OAMd,kBAACC,EAAA,EAAKO,MAAN,KACE,kBAACC,EAAA,EAAD,KACE,kBAACR,EAAA,EAAKS,QAAN,CACEC,KAAK,OACLC,MAAOb,EACPc,SApBgB,SAACV,GACzBH,EAAcG,EAAEW,OAAOF,UAqBjB,kBAACH,EAAA,EAAWM,OAAZ,KACE,kBAACN,EAAA,EAAWO,KAAZ,KACE,kBAAC,IAAD,CAAiBC,KAAMC,SAI7B,kBAACjB,EAAA,EAAKe,KAAN,CAAWG,UAAU,cAArB,oC,gCChCKC,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,kBAACC,EAAA,EAAD,CAAMJ,UAAU,qCACd,kBAACI,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAKJ,IAC7B,kBAACC,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KAAaP,M,yBCVRQ,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfT,EADe,0FAC0EU,UAC7FF,GAFmB,sBAIFG,MAAMX,GAJJ,cAIfY,EAJe,gBAKEA,EAAKC,OALP,uBAKbC,EALa,EAKbA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GACrB,MAAO,CACLC,GAAID,EAAIC,GACRnB,MAAOkB,EAAIlB,MACXC,IAAKiB,EAAIE,OAAOC,iBAAiBpB,QAXhB,kBAede,GAfc,4CAAH,sDCOPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECHb,SAACA,GAAc,IAAD,EACdhC,mBAAS,CACjCsC,KAAM,GACNQ,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACC,GACtBH,EAAS,CACPV,KAAMa,EACNL,SAAS,SAGZ,CAACd,IAEGe,EDXmBK,CAAapB,GAA/BM,EAD+B,EAC/BA,KAAMQ,EADyB,EACzBA,QAEd,OACE,6BACE,wBAAIzB,UAAU,qCAAqCW,GAElDc,GACC,kBAACO,EAAA,EAAD,CAASC,UAAU,SAASC,KAAK,UAC/B,0BAAMlC,UAAU,WAAhB,eAIJ,kBAACmC,EAAA,EAAD,KACGlB,EAAKE,KAAI,SAACC,GAAD,OACR,kBAAC,EAAD,eAAagB,IAAKhB,EAAIC,IAAQD,UEjB3BiB,EAAe,WAAO,IAAD,EACI1D,mBAAS,IADb,mBACzBS,EADyB,KACbV,EADa,KAGhC,OACE,kBAAC4D,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,MAAM,MAAMC,GAAG,OAAOnC,QAAQ,QACpC,kBAACiC,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,gBACA,kBAACJ,EAAA,EAAOK,OAAR,OAEF,yBAAK5C,UAAU,WACb,kBAAC6C,EAAA,EAAD,KACE,4CACA,gEACoC,mDAEpC,kBAAC,EAAD,CAAanE,cAAeA,KAE7BU,EAAW+B,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASyB,IAAKzB,EAAUA,SAAUA,UChB5CmC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.e3fb4c90.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\nimport { Form, InputGroup } from \"react-bootstrap\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group>\n        <InputGroup>\n          <Form.Control\n            type=\"text\"\n            value={inputValue}\n            onChange={handleInputChange}\n          />\n          <InputGroup.Append>\n            <InputGroup.Text>\n              <FontAwesomeIcon icon={faSearch} />\n            </InputGroup.Text>\n          </InputGroup.Append>\n        </InputGroup>\n        <Form.Text className=\"text-muted\">\n          Type something + Enter button\n        </Form.Text>\n      </Form.Group>\n    </Form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import \"animate.css\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card } from \"react-bootstrap\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <Card className=\"animate__animated animate__fadeIn\">\n      <Card.Img variant=\"top\" src={url} />\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n      </Card.Body>\n    </Card>\n  );\n};\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n","export const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=qvTmuGaKAiWVAVQ6JGVWpGhV3Bb89TxX&q=${encodeURI(\n    category\n  )}&limit=10`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CardColumns, Spinner } from \"react-bootstrap\";\n\nimport { GifGridItem } from \"./GifGridItem\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data, loading } = useFetchGifs(category);\n\n  return (\n    <div>\n      <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\n      {loading && (\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      )}\n\n      <CardColumns>\n        {data.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </CardColumns>\n    </div>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n","import { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({\n        data: imgs,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { Container, Jumbotron, Navbar } from \"react-bootstrap\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <Container>\n      <Navbar fixed=\"top\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#home\">GifExpertApp</Navbar.Brand>\n        <Navbar.Toggle />\n      </Navbar>\n      <div className=\"content\">\n        <Jumbotron>\n          <h1>GifExpertApp</h1>\n          <p>\n            Search all the GIFs and Stickers. <code>Powered by GIPHY</code>\n          </p>\n          <AddCategory setCategories={setCategories} />\n        </Jumbotron>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </div>\n    </Container>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./index.css\";\n\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}